// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "client-services/internal/graph/model"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageInterface is a mock of StorageInterface interface.
type MockStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageInterfaceMockRecorder
}

// MockStorageInterfaceMockRecorder is the mock recorder for MockStorageInterface.
type MockStorageInterfaceMockRecorder struct {
	mock *MockStorageInterface
}

// NewMockStorageInterface creates a new mock instance.
func NewMockStorageInterface(ctrl *gomock.Controller) *MockStorageInterface {
	mock := &MockStorageInterface{ctrl: ctrl}
	mock.recorder = &MockStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageInterface) EXPECT() *MockStorageInterfaceMockRecorder {
	return m.recorder
}

// CloseDB mocks base method.
func (m *MockStorageInterface) CloseDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseDB indicates an expected call of CloseDB.
func (mr *MockStorageInterfaceMockRecorder) CloseDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockStorageInterface)(nil).CloseDB))
}

// MockPostInterface is a mock of PostInterface interface.
type MockPostInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostInterfaceMockRecorder
}

// MockPostInterfaceMockRecorder is the mock recorder for MockPostInterface.
type MockPostInterfaceMockRecorder struct {
	mock *MockPostInterface
}

// NewMockPostInterface creates a new mock instance.
func NewMockPostInterface(ctrl *gomock.Controller) *MockPostInterface {
	mock := &MockPostInterface{ctrl: ctrl}
	mock.recorder = &MockPostInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostInterface) EXPECT() *MockPostInterfaceMockRecorder {
	return m.recorder
}

// GetAllPosts mocks base method.
func (m *MockPostInterface) GetAllPosts(ctx context.Context) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", ctx)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostInterfaceMockRecorder) GetAllPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostInterface)(nil).GetAllPosts), ctx)
}

// GetPost mocks base method.
func (m *MockPostInterface) GetPost(ctx context.Context, id string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostInterfaceMockRecorder) GetPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostInterface)(nil).GetPost), ctx, id)
}

// SavePost mocks base method.
func (m *MockPostInterface) SavePost(ctx context.Context, p *model.Post) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePost", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SavePost indicates an expected call of SavePost.
func (mr *MockPostInterfaceMockRecorder) SavePost(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePost", reflect.TypeOf((*MockPostInterface)(nil).SavePost), ctx, p)
}

// MockCommentInterface is a mock of CommentInterface interface.
type MockCommentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommentInterfaceMockRecorder
}

// MockCommentInterfaceMockRecorder is the mock recorder for MockCommentInterface.
type MockCommentInterfaceMockRecorder struct {
	mock *MockCommentInterface
}

// NewMockCommentInterface creates a new mock instance.
func NewMockCommentInterface(ctrl *gomock.Controller) *MockCommentInterface {
	mock := &MockCommentInterface{ctrl: ctrl}
	mock.recorder = &MockCommentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentInterface) EXPECT() *MockCommentInterfaceMockRecorder {
	return m.recorder
}

// GetComments mocks base method.
func (m *MockCommentInterface) GetComments(ctx context.Context, first *int32, after *string, postID string) (*[]model.Comment, bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", ctx, first, after, postID)
	ret0, _ := ret[0].(*[]model.Comment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetComments indicates an expected call of GetComments.
func (mr *MockCommentInterfaceMockRecorder) GetComments(ctx, first, after, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockCommentInterface)(nil).GetComments), ctx, first, after, postID)
}

// IsCommentExist mocks base method.
func (m *MockCommentInterface) IsCommentExist(ctx context.Context, commentID, postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommentExist", ctx, commentID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsCommentExist indicates an expected call of IsCommentExist.
func (mr *MockCommentInterfaceMockRecorder) IsCommentExist(ctx, commentID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommentExist", reflect.TypeOf((*MockCommentInterface)(nil).IsCommentExist), ctx, commentID, postID)
}

// SaveComment mocks base method.
func (m *MockCommentInterface) SaveComment(ctx context.Context, c *model.Comment) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComment", ctx, c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SaveComment indicates an expected call of SaveComment.
func (mr *MockCommentInterfaceMockRecorder) SaveComment(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComment", reflect.TypeOf((*MockCommentInterface)(nil).SaveComment), ctx, c)
}
