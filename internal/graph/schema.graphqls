scalar Time

type Post {
  id: ID!
  title: String!
  content: String!
  comments(start: Int, after: String): CommentConnection!
  commentsAllowed: Boolean!
  createdAt: Time!
}

type Comment {
  id: ID!
  postID: ID!
  parentID: ID
  content: String!
  createdAt: Time!
}

type CommentConnection {
  totalCount: Int
  edges: [CommentEdge!]
  pageInfo: PageInfo!
}

type CommentEdge {
  cursor: ID!
  node: Comment!
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
}

type CommentNotify {
  postID: ID!
  id: ID!
  content: ID!
}

type Query {
  getAllPosts: [Post!]!
  getPost(id: ID!, first: Int, after: String): Post
}

type Mutation {
  createPost(title: String!, content: String!, commentsAllowed: Boolean!): Post!
  createComment(parentID: ID, postID: ID! ,content: String!): Comment!
}

type Subscription {
  commentsUpdated(postID: ID!): CommentNotify!
}